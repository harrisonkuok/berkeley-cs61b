This program inserts lexicographically increasing Strings into Maps as <String, Integer> pairs.

Enter # strings to insert into the maps: 100
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec

Would you like to try more timed-tests? (y/n): 1000

Enter # strings to insert into the maps: 1000
class ULLMap: 0.02 sec
class BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec

Would you like to try more timed-tests? (y/n): 10000

Enter # strings to insert into the maps: 10000
class ULLMap: 0.27 sec
class BSTMap: 0.30 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.00 sec

Would you like to try more timed-tests? (y/n): y

Enter # strings to insert into the maps: 100000
--Stack Overflow -- couldn't add 100000 strings.
--Stack Overflow -- couldn't add 100000 strings.
Java's Built-in TreeMap: 0.09 sec
Java's Built-in HashMap: 0.03 sec

Would you like to try more timed-tests? (y/n): n

This program inserts random Strings of length L
into different types of maps as <String, Integer> pairs.

Please enter desired length of each string: 3

Enter # strings to insert into the maps: 100
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 1000
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 10000
class ULLMap: 0.19 sec
class BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.00 sec

Would you like to try more timed-tests? (y/n)y

Enter # strings to insert into the maps: 100000
--Stack Overflow -- couldn't add 100000 strings of length 3.
class BSTMap: 0.03 sec
Java's Built-in TreeMap: 0.05 sec

Would you like to try more timed-tests? (y/n)n